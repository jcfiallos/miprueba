{
    "collab_server" : "",
    "contents" : "\n\nif (!(\"shiny\" %in% names(installed.packages()[,\"Package\"]))) {install.packages(\"shiny\")}\nsuppressMessages(library(shiny, quietly = TRUE))\n\nif (!(\"openintro\" %in% names(installed.packages()[,\"Package\"]))) {install.packages(\"openintro\")}\nsuppressMessages(library(openintro, quietly = TRUE))\n\nif (!(\"plotrix\" %in% names(installed.packages()[,\"Package\"]))) {install.packages(\"plotrix\")}\nsuppressMessages(library(plotrix, quietly = TRUE))\n\nlibrary(stats)\nlibrary(dygraphs)\nlibrary(datasets)\nlibrary(xts)\nlibrary(forecast)\nlibrary(fANCOVA)\n\n\n#Aqui empieza \n\nshinyServer(function(input, output,session) {\n  \n#Carga de datos desde un archivo\n  data <- reactive({ \n    req(input$file1) ## ?req #  require that the input is available\n    \n    inFile <- input$file1 \n    if (!(is.null(inFile))){\n      #Se lee un archivo con los parametros selecionados y se se carga en un dataframe\n      df <- read.csv(inFile$datapath, header = input$header, sep = input$sep,\n                     quote = input$quote, dec= input$deci )\n      ejex <-  1:nrow(df)\n      ejey <- as.numeric(df$V1)\n      if (input$frec == 'days') f <- 365\n      if (input$frec == 'month') f <- 12\n      if (input$frec == 'quarter') f <- 4\n      if (input$frec == 'years') f <- 1\n      serie=ts(ejey,freq=f, start=input$fecha)\n      return(serie)\n    }\n    else{return = NULL}\n  })\n  \n  #Carga ventana de datos \n  dataw <- reactive({ \n    req(input$file1) ## ?req #  require that the input is available\n    d <- data()\n    #ventana de tiempo\n    inicioS <- strftime(input$fecha, \"%Y-%m-%d\")\n    inicioV <- strftime(req(input$dygraph_date_window[[1]]), \"%Y-%m-%d\")\n    finV <- strftime(req(input$dygraph_date_window[[2]]), \"%Y-%m-%d\")\n    dia.nuevo.inicio <- difftime(inicioV, inicioS, units = \"days\") + 1\n    dias.nuevaserie <- difftime(finV, inicioV, units = \"days\")\n    dia.nuevo.fin <- dia.nuevo.inicio + dias.nuevaserie\n    nuevadata <- as.matrix(d[dia.nuevo.inicio:dia.nuevo.fin])\n    ejex <-  1:nrow(nuevadata)\n    if (input$frec == 'days') f <- 365\n    if (input$frec == 'month') f <- 12\n    if (input$frec == 'quarter') f <- 4\n    if (input$frec == 'years') f <- 1\n    serie=ts(nuevadata,freq=f, start=input$fecha)\n    return(serie)\n  })\n  \n  \n# grafica la serie con dygraphs   \n  output$dygraph <- renderDygraph({\n    inFile <- input$file1 \n    if (!(is.null(inFile))){\n    df <- data()\n    ny <- as.matrix(df)\n    Date <- seq(input$fecha, length= length(ny), by=input$frec)#preguntar a Aldo para cambiar con frecu\n    ndf <- data.frame(ny, Date)\n    yxts <- xts(ndf$ny, order.by = ndf$Date, frecuency = input$frec)\n    \n    dygraph(yxts, main = \"Serie Usuario\") %>% \n    dyRangeSelector()\n    }\n  })\n\n  output$from <- renderText({\n    strftime(req(input$dygraph_date_window[[1]]), \"%Y-%m-%d\")      \n  })\n  \n  output$to <- renderText({\n       strftime(req(input$dygraph_date_window[[2]]), \"%Y-%m-%d\")\n  })\n\n  \n# Modelos para evaluar\n  \n  #Regresion lineal\n  lmResults <- reactive({\n    d <- data()\n    t <- seq(1:length(d))\n    It <- seasonaldummy(d)\n    It2 <- seasonaldummy(log(d))\n    \n    if (!(input$est)){\n      if (input$tipo == \"Aditivos\"){\n        if(input$metodo == \"Lineal\"){\n          return <- lm(formula = d ~ t)    \n        }\n        else{\n          if(input$metodo == \"Cuadratico\"){\n            tt <- t^2\n            return <- lm(formula = d ~ t + tt)      \n          }\n          else{\n            if(input$metodo == \"Cubico\"){\n              tt <- t^2\n              ttt <- t^3\n              return <- lm(formula = d ~ t + tt + ttt)      \n            }\n            else{\n              if(input$metodo == \"Orden 4\"){\n                #TENDENCIA Grado cuarta\n                tt <- t^2\n                ttt <- t^3\n                tttt <- t^4\n                return <- lm(formula = d ~ t + tt + ttt + tttt)      \n              }\n            }\n          }  \n        }\n      }# fin if aditivos\n      else{\n        if (input$tipo == \"Multiplicativos\"){\n          if(input$metodo == \"Lineal\"){\n            return <- lm(formula = log(d) ~ t)\n          }\n          else{\n            if(input$metodo == \"Cuadratico\"){\n              tt <- t^2\n              return <- lm(formula = log(d) ~ t + tt)      \n            }\n            else{\n              if(input$metodo == \"Cubico\"){\n                #TENDENCIA CUBICA\n                tt <- t^2\n                ttt <- t^3\n                return <- lm(formula = log(d) ~ t + tt + ttt)      \n              }\n              else{\n                if(input$metodo == \"Orden 4\"){\n                  #TENDENCIA Grado cuarta\n                  tt <- t^2\n                  ttt <- t^3\n                  tttt <- t^4\n                  return <- lm(formula = log(d) ~ t + tt + ttt + tttt)      \n                }\n              }\n            }  \n          }\n        }# fin if multiplicativos        \n      }\n    }\n    else{ # es el bloque para los estacionarios\n      if (input$tipo == \"Aditivos\"){\n        if(input$metodo == \"Lineal\"){\n          return <- lm(formula = d ~ t + It)    \n        }\n        else{\n          if(input$metodo == \"Cuadratico\"){\n            tt <- t^2\n            return <- lm(formula = d ~ t + tt + It )      \n          }\n          else{\n            if(input$metodo == \"Cubico\"){\n              tt <- t^2\n              ttt <- t^3\n              return <- lm(formula = d ~ t + tt + ttt + It)      \n            }\n            else{\n              if(input$metodo == \"Orden 4\"){\n                #TENDENCIA Grado cuarta\n                tt <- t^2\n                ttt <- t^3\n                tttt <- t^4\n                return <- lm(formula = d ~ t + tt + ttt + tttt + It)      \n              }\n            }\n          }  \n        }\n      }# fin if aditivos\n      else{\n        if (input$tipo == \"Multiplicativos\"){\n          if(input$metodo == \"Lineal\"){\n            return <- lm(formula = log(d) ~ t + It2)\n          }\n          else{\n            if(input$metodo == \"Cuadratico\"){\n              tt <- t^2\n              return <- lm(formula = log(d) ~ t + tt + It2)      \n            }\n            else{\n              if(input$metodo == \"Cubico\"){\n                #TENDENCIA CUBICA\n                tt <- t^2\n                ttt <- t^3\n                return <- lm(formula = log(d) ~ t + tt + ttt + It2)      \n              }\n              else{\n                if(input$metodo == \"Orden 4\"){\n                  #TENDENCIA Grado cuarta\n                  tt <- t^2\n                  ttt <- t^3\n                  tttt <- t^4\n                  return <- lm(formula = log(d) ~ t + tt + ttt + tttt + It2)      \n                }\n              }\n            }  \n          }\n        }# fin if multiplicativos        \n      }\n    }\n    \n\n  })\n  \n  #REGRESION_show plots\n  output$scatter <- renderPlot({\n    y <- data()\n    x <- seq(1:length(y))\n    \n    datos.entreno <- dataw()\n    \n    #used for confidence interval\n    xcon <- seq(min\n                (x), max(x), 1)\n    \n    predictor <- data.frame(x=xcon)\n    \n    if(input$tipo == \"Multiplicativos\"){\n      yhat2 <- predict(lmResults())\n      yhat <- exp(yhat2)\n      yline2 <- predict(lmResults(), predictor)\n      yline <- exp(yline2)\n      r.squared = round(summary((lmResults()))$r.squared, 4)\n      newx <- seq(min(x), max(x), length.out=length(x))\n      confs2 <- predict((lmResults()), newdata = data.frame(x=newx), \n                       interval = 'confidence')\n      confs <- exp(confs2)\n      preds2 <- predict(lmResults(), newdata = data.frame(x=newx), \n                       interval = 'predict')\n      preds <- exp(preds2)\n    }\n    else{\n      if(input$tipo ==\"Aditivos\"){\n        yhat <- predict(lmResults()) \n        yline <- predict(lmResults(), predictor)\n        r.squared = round(summary(lmResults())$r.squared, 4)\n        newx <- seq(min(x), max(x), length.out=length(x))\n        confs <- predict(lmResults(), newdata = data.frame(x=newx), \n                         interval = 'confidence')\n        preds <- predict(lmResults(), newdata = data.frame(x=newx), \n                         interval = 'predict')\n        \n      }\n    }\n    \n    par(cex.main=1, cex.lab=1, cex.axis=1, mar = c(4,4,4,1))\n    corr.coef = round(sqrt(r.squared), 4)\n  \n    plot(c(min(x),max(x)) \n         ,c(min(y,yline),max(y,yline)), \n         type=\"n\",\n         xlab=\"x\",\n         ylab=\"y\",\n         main=paste0(\"Modelo de Regresion\\n\",\"(R = \", corr.coef,\", \", \"R-cuadrado = \", r.squared,\")\"))\n    \n    polygon(c(rev(newx), newx), c(rev(preds[ ,3]), preds[ ,2]), col = grey(.95), border = NA)\n    polygon(c(rev(newx), newx), c(rev(confs[ ,3]), confs[ ,2]), col = grey(.60), border = NA)\n    \n    \n    points(x,y,pch=21, col=COL[1,4])\n    lines(xcon, yline, lwd=1, col=\"red\")\n    \n    if (input$show.resid) for (j in 1:length(x)) \n      lines(rep(x[j],2), c(yhat[j],y[j]), col=COL[4])\n    \n    legend_pos = ifelse(lmResults()$coefficients[1] < 1, \"topleft\", \"topright\")\n    # if(input$type == \"linear.down\") legend_pos = \"topright\"\n    #if(input$type == \"fan.shaped\") legend_pos = \"topleft\"   \n    legend(legend_pos, inset=.05,\n           legend=c(length(datos.entreno), \"AQUI SE LEEN LOS RESULTADOS\", \"AQUI SE LEEN LOS RESULTADOS\"), \n           fill=c(COL[1],grey(.75),grey(.95)))\n    box()\n  })\n  \n  output$residuals <- renderPlot({\n    par(mfrow=c(1,3), cex.main=1.3, cex.lab=1.3, cex.axis=1.3, mar=c(4,5,2,2))\n    residuals = residuals(lmResults())\n    predicted = predict(lmResults(), newdata = data.frame(x=data()))\n    plot(residuals ~ predicted, \n         main=\"Residuales vs. Valores Ajustados\", xlab=\"Valores Ajustados\", ylab=\"Residuales\", \n         pch=19, col = COL[1,2])\n    abline(h = 0, lty = 2)\n    d = density(residuals)$y\n    h = hist(residuals, plot = FALSE)\n    hist(residuals, main=\"Histograma de Residuales\", xlab=\"Residuales\", \n         col=COL[1,2], prob = TRUE, ylim = c(0,max(max(d), max(h$density))))\n    lines(density(residuals), col = COL[1], lwd = 2)\n    qqnorm(residuals, pch=19, col = COL[1,2], main = \"Normal Q-Q Plot de Residuales\")\n    qqline(residuals, col = COL[1], lwd = 2)\n  }, height=280 )\n  \n  \n  #Modelo Holt Winters\n  hwResults <- reactive({\n    p <- data()\n    demand <- ts(p, start = c(2000, 1), frequency = 365)\n    t <- seq(1:length(demand))\n    \n    if (input$tipohw == \"Multiplicativos\"){\n      return <- HoltWinters(demand, alpha=NULL, beta=NULL, gamma=NULL, seasonal = \"multiplicative\")\n    }\n    else{\n      if(input$tipohw == \"Aditivos\"){\n        return <- HoltWinters(demand, alpha=NULL, beta=NULL, gamma=NULL, seasonal = \"additive\")\n      }\n    }\n    \n  })\n  \n  \n  # HOLT WINTERS_Show plot \n  output$scatter2 <- renderPlot({\n    o <- data()\n    demand2 <- ts(log(o), start = c(2000, 1), frequency = 365)\n    t <- seq(1:length(demand2))\n    \n    pred <- predict(hwResults(), n.ahead = 730, prediction.interval = T, level = 0.95)\n    \n    plot(hwResults(),pred, col=1)\n    lines(fitted(hwResults())[,1], col=2)\n    #plot(x=t,y=o,col=1, type=\"l\")\n    #plot(x=t,y=hwResults(), col=3)\n    #lines(fitted(hwResults())[,1], col=2)\n    \n    #if (input$tipohw == \"Multiplicativos\"){\n    #y <- log(y)\n    #}\n    #x <- seq(1:length(y))\n    #plot(x,y, col=1)\n    #lines(hwResults(), col=3)\n    #lines(fitted(hwResults())[,1], col=2)\n    #all <- cbind(yy)\n    #ny <- as.matrix(y)\n    #Date <- seq(1, length= length(ny), by=365)#preguntar a Aldo para cambiar con frecu\n    #ndf <- data.frame(ny, Date)\n    #yxts <- xts(ndf$ny, order.by = ndf$Date, frecuency = input$frec)\n    #dygraph(yxts, pred) %%\n    #dySeries(\"y\", label=\"Actual\") %%\n    #dySeries(c(\"p.lwr\", \"p.fit\", \"p.upr\"), label = \"Predicted\")\n  })\n  \n  output$residuals2 <- renderPlot({\n    par(mfrow=c(1,3), cex.main=1.3, cex.lab=1.3, cex.axis=1.3, mar=c(4,5,2,2))\n    residuals = residuals(hwResults())\n    plot(residuals, \n         main=\"Residuales\", xlab=\"Valores Ajustados\", ylab=\"Residuales\", \n         pch=19, col = COL[1,2])\n    abline(h = 0, lty = 2)\n    d = density(residuals)$y\n    h = hist(residuals, plot = FALSE)\n    hist(residuals, main=\"Histograma de Residuales\", xlab=\"Residuales\", \n         col=COL[1,2], prob = TRUE, ylim = c(0,max(max(d), max(h$density))))\n    lines(density(residuals), col = COL[1], lwd = 2)\n    qqnorm(residuals, pch=19, col = COL[1,2], main = \"Normal Q-Q Plot de Residuales\")\n    qqline(residuals, col = COL[1], lwd = 2)\n  }, height=280 )\n  \n  \n  \n  #LOESS y Descomposicion\n  loResults1 <- reactive({\n    d <- data()\n    o <- ts(d, start = c(2000, 1), frequency = 365)\n    t <- seq(1:length(d))\n    tnuevo <- (length(d)+1):(length(d)+730)\n    Tt <- 1\n    St <- 1\n    \n    \n    factoresdeltai=function(descom,s,estacioni){\n      if(estacioni==1){\n        deltasi=descom$figure\n      }\n      if(estacioni!=1){\n        j=estacioni;deltasi=c(descom$figure[(s-j+2):s],descom$figure[1:(s-j+1)])\n      }\n      deltasi\n    }\n    \n    if (input$tipolo == \"Lineal\") grado <- 1 \n    if (input$tipolo == \"Cuadratico\") grado <- 2\n    if (input$tipob == \"Aditivos\"){\n      comp <- \"additive\" \n      ecu <- o-St\n    } \n    if (input$tipob == \"Multiplicativos\") {\n      comp <- \"multiplicative\"\n      ecu <- o/St\n    }\n    \n    descom=decompose(o,type = comp)\n    St=descom$seasonal\n    deltas_i=factoresdeltai(descom=descom,s=365,estacioni = 1)\n    data.frame(deltas_i)\n    o.no.St=(ecu)\n    \n    ajusteloess=loess.as(t,o.no.St,degree = grado,criterion = \"aicc\",family = \"gaussian\",plot = F)\n    Tt=ts(fitted(ajusteloess),frequency = 365,start = c(2000,1))\n    alpha.optimo=ajusteloess$pars$span #guardando el alpha optimo\n    \n    if (input$tipob == \"Aditivos\"){\n      modelo <- Tt+St\n    } \n    if (input$tipob == \"Multiplicativos\"){\n      modelo <- Tt*St\n    }\n    return(modelo)\n  })    \n  \n  loResults2 <- reactive({\n    d <- data()\n    o <- ts(d, start = c(2000, 1), frequency = 365)\n    t <- seq(1:length(d))\n    tnuevo <- (length(o)+1):(length(o)+1395)\n    Ttnuevo <- 1\n    Stnuevo <- 1\n    \n    factoresdeltai=function(descom,s,estacioni){\n      if(estacioni==1){\n        deltasi=descom$figure\n      }\n      if(estacioni!=1){\n        j=estacioni;deltasi=c(descom$figure[(s-j+2):s],descom$figure[1:(s-j+1)])\n      }\n      deltasi\n    }\n    \n    if (input$tipolo == \"Lineal\") grado <- 1 \n    if (input$tipolo == \"Cuadratico\") grado <- 2\n    if (input$tipob == \"Aditivos\"){\n      comp <- \"additive\" \n      ecu <- o-Stnuevo\n    } \n    if (input$tipob == \"Multiplicativos\") {\n      comp <- \"multiplicative\"\n      ecu <- o/Stnuevo\n    }\n    \n    descom=decompose(o,type = comp)\n    St=descom$seasonal\n    deltas_i=factoresdeltai(descom=descom,s=365,estacioni = 1)\n    data.frame(deltas_i)\n    o.no.St=(ecu)\n    \n    ajusteloess=loess.as(t,o.no.St,degree = grado,criterion = \"aicc\",family = \"gaussian\",plot = F)\n    Tt=ts(fitted(ajusteloess),frequency = 365,start = c(2000,1))\n    alpha.optimo=ajusteloess$pars$span #guardando el alpha optimo\n    \n    l <- seq(1:365)\n    i=c(l,l,l) #identificando la estacion correspondiente a los m=15 periodos de pronostico\n    Stnuevo=deltas_i[i] #asignando los delta_i a los periodos a pronosticar\n    Stnuevo=ts(Stnuevo,frequency=365,start=c(2010,365)) #convertimos en serie el pronostico de St\n    \n    o.no.St=(ecu)\n    \n    Ttnuevo=predict(loess(o.no.St~t,span = alpha.optimo, degree = grado,control = loess.control(surface = \"direct\")),data.frame(t=tnuevo),se=FALSE)\n    Ttnuevo=ts(Ttnuevo,frequency=365,start = c(2010,365)) #Convirtiendo en serie de tiempo al pronostico de Tt\n    \n    if (input$tipob == \"Aditivos\"){\n      modelopron <- Ttnuevo+Stnuevo\n    } \n    if (input$tipob == \"Multiplicativos\"){\n      modelopron <- Ttnuevo*Stnuevo\n    }\n    return(modelopron)\n  })\n  \n  \n  #LOESS\n  output$scatter3 <- renderPlot({\n    y <- data()\n    o <- ts(y, start = c(2000, 1), frequency = 365)\n    \n    plot(o,col=1)\n    lines(loResults1(), col=2)\n    lines(loResults2(), col=3)\n    #lines(y.fit.hat2,col=2)\n    #legend(\"topleft\",legend=c(\"Original\",\"Ajustada\", \"Pronostico\"),col=c(1,2,3),lty = 1)\n    \n  })\n})\n",
    "created" : 1506748613808.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3609621596",
    "id" : "E4DA8AA3",
    "lastKnownWriteTime" : 1506748253,
    "last_content_update" : 1506748253,
    "path" : "~/GitHub/miprueba/R/server.r",
    "project_path" : "R/server.r",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}